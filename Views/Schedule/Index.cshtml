@model Schedule.Data.Models.ScheduleViewModel

@{
    ViewData["Title"] = "Расписание";
}

<h1>Расписание</h1>

<!-- Вывод ошибок, если ModelState не валиден -->
@if (!ViewData.ModelState.IsValid)
{
        <div class="alert alert-danger">
            <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                        <li>@error.ErrorMessage</li>
            }
            </ul>
        </div>
}

<!-- Контейнер для клиентской валидации -->
<div id="clientValidationErrors"></div>

<div class="row">
    <div class="col-md-4">
        <h3>Расписание для группы</h3>
        <div class="form-group">
            <select id="groupSelect" class="form-control">
                <option value="">-- Выберите группу --</option>
                @foreach (var group in Model.Groups)
                {
                        <option value="@group.Value">@group.Text</option>
                }
            </select>
        </div>
        <button id="btnLoadGroup" class="btn btn-primary">Загрузить</button>
    </div>
    <div class="col-md-4">
        <h3>Расписание для преподавателя</h3>
        <div class="form-group">
            <select id="teacherSelect" class="form-control">
                <option value="">-- Выберите преподавателя --</option>
                @foreach (var teacher in Model.Teachers)
                {
                        <option value="@teacher.Value">@teacher.Text</option>
                }
            </select>
        </div>
        <button id="btnLoadTeacher" class="btn btn-primary">Загрузить</button>
    </div>
    <div class="col-md-4">
        <h3>Общее расписание</h3>
        <button id="btnLoadGeneral" class="btn btn-primary">Загрузить</button>
    </div>
</div>

<hr />

<div id="scheduleResults">
    <!-- Сюда будет подгружаться расписание -->
</div>

@section Scripts {
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script>
            $(document).ready(function () {
                console.log("jQuery version: " + $.fn.jquery);

                // Переменные для отслеживания текущего состояния
                let currentRequestType = null;
                let currentRequestId = null;
                let currentSortField = "Time";
                let currentSortOrder = "asc";

                // Функция для отображения клиентских ошибок
                function showValidationError(message) {
                    var html = '<div class="alert alert-danger"><ul><li>' + message + '</li></ul></div>';
                    $('#clientValidationErrors').html(html);
                }

                // Очистка ошибок
                function clearValidationError() {
                    $('#clientValidationErrors').html('');
                }

                // Загрузка расписания (универсальная)
                function loadSchedule(type, id, sortField = null, sortOrder = null) {
                    clearValidationError();
                    currentRequestType = type;
                    currentRequestId = id;

                    // Обновляем параметры сортировки, если переданы
                    if (sortField) currentSortField = sortField;
                    if (sortOrder) currentSortOrder = sortOrder;

                    let url = "";
                    let data = {
                        sortField: currentSortField,
                        sortOrder: currentSortOrder
                    };

                    switch (type) {
                        case "group":
                            url = '@Url.Action("GroupSchedule", "Schedule")';
                            data.groupId = id;
                            break;
                        case "teacher":
                            url = '@Url.Action("TeacherSchedule", "Schedule")';
                            data.teacherId = id;
                            break;
                        case "general":
                            url = '@Url.Action("GeneralSchedule", "Schedule")';
                            break;
                    }

                    $.get(url, data, function (result) {
                        $('#scheduleResults').html(result);
                        bindSortingLinks(); // переназначаем обработчики после обновления DOM
                    });
                }

                // Назначение обработчиков сортировки
                function bindSortingLinks() {
                    $("#scheduleResults th a").off("click").on("click", function (e) {
                        e.preventDefault();

                        const sortField = $(this).data("sortfield");

                        // Переключение порядка сортировки
                        if (currentSortField === sortField) {
                            currentSortOrder = (currentSortOrder === "asc") ? "desc" : "asc";
                        } else {
                            currentSortField = sortField;
                            currentSortOrder = "asc";
                        }

                        loadSchedule(currentRequestType, currentRequestId, currentSortField, currentSortOrder);
                    });
                }

                // Обработчики кнопок загрузки расписания
                $('#btnLoadGroup').click(function () {
                    let groupId = $('#groupSelect').val();
                    if (groupId) {
                        loadSchedule("group", groupId);
                    } else {
                        showValidationError("Пожалуйста, выберите группу.");
                    }
                });

                $('#btnLoadTeacher').click(function () {
                    let teacherId = $('#teacherSelect').val();
                    if (teacherId) {
                        loadSchedule("teacher", teacherId);
                    } else {
                        showValidationError("Пожалуйста, выберите преподавателя.");
                    }
                });

                $('#btnLoadGeneral').click(function () {
                    loadSchedule("general", null);
                });

            });
        </script>
}
